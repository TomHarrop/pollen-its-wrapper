#!/usr/bin/env python3

from Bio import Seq
from pathlib import Path
import pandas
import shutil
import snakemake


#############
# FUNCTIONS #
#############

def get_fastq_paths(wildcards):
    return(samples.loc[wildcards.sample_number].to_dict())


# quick reverse complement with biopython
def rc(x):
    return(str(Seq.Seq(x).reverse_complement()))


###########
# GLOBALS #
###########

database = config['database']
sample_csv = config['samples_csv']
its_f = config['its_f']
its_r = config['its_r']
outdir = Path(config['outdir'])

# directories
logdir = Path(outdir, 'logs')

# dev
# database = 'data/its1-58024_dada2.fa'
# sample_csv = 'data/samples.csv'
# its_f = 'ATGCGATACTTGGTGTGAAT'
# its_r = 'GACGCTTCTCCAGACTACAAT'

########
# MAIN #
########

samples = pandas.read_csv(
    sample_csv,
    index_col='sample')
all_samples = sorted(set(samples.index))


#########
# RULES #
#########


rule target:
    input:
        Path(outdir, 'taxa_with_counts.csv')

# run dada2 workflow
rule merge_taxa_with_counts:
    input:
        nochim = Path(outdir, 'dada2', 'seqtab_nochim.Rds'),
        taxa = Path(outdir, 'dada2', 'taxa.Rds'),
    output:
        taxa_with_counts = Path(outdir, 'taxa_with_counts.csv')
    log:
        Path(logdir, 'merge_taxa_with_counts.log')
    script:
        shutil.which('merge_taxa_with_counts.R')

rule run_dada2:
    input:
        r1 = expand(
            Path(outdir, 'preprocess', 's{sample_number}_cutadapt_r1.fq.gz'),
            sample_number=all_samples),
        r2 = expand(
            Path(outdir, 'preprocess', 's{sample_number}_cutadapt_r2.fq.gz'),
            sample_number=all_samples),
        fa = database
    output:
        seqtab = Path(outdir, 'dada2', 'seqtab.Rds'),
        nochim = Path(outdir, 'dada2', 'seqtab_nochim.Rds'),
        taxa = Path(outdir, 'dada2', 'taxa.Rds'),
        errF_plot = Path(outdir, 'dada2', 'errF.pdf'),
        errR_plot = Path(outdir, 'dada2', 'errR.pdf')
    log:
        Path(logdir, 'run_dada2.log')
    threads:
        workflow.cores
    script:
        shutil.which('run_dada2.R')

# use cutadapt as recommended
rule cutadapt:
    input:
        r1 = Path(outdir, 'preprocess', 's{sample_number}_filtn_r1.fq.gz'),
        r2 = Path(outdir, 'preprocess', 's{sample_number}_filtn_r2.fq.gz')
    output:
        r1 = Path(outdir, 'preprocess', 's{sample_number}_cutadapt_r1.fq.gz'),
        r2 = Path(outdir, 'preprocess', 's{sample_number}_cutadapt_r2.fq.gz')
    params:
        primer_f = its_f,
        primer_r = its_r,
        rcf = rc(its_f),
        rcr = rc(its_r)
    log:
        Path(logdir, 'cutadapt_{sample_number}.log')
    shell:
        'cutadapt '
        '-g {params.primer_f} '
        '-a {params.rcr} '
        '-G {params.primer_r} '
        '-A {params.rcf} '
        '-n 2 '
        '-o {output.r1} '
        '-p {output.r2} '
        '{input.r1} '
        '{input.r2} '
        '&> {log}'

# use dada2's default trimming
rule d2_filter_and_trim:
    input:
        unpack(get_fastq_paths)
    output:
        r1 = Path(outdir, 'preprocess', 's{sample_number}_filtn_r1.fq.gz'),
        r2 = Path(outdir, 'preprocess', 's{sample_number}_filtn_r2.fq.gz')
    log:
        Path(logdir, 'd2-filter-and-trim_{sample_number}.log')
    script:
        shutil.which('d2_filter_and_trim.R')
